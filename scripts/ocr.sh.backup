#!/usr/bin/env bash
# ocr.sh - Batch OCR once all frames extracted
#   $1: <hash>/ directory (expects frames directory)
# Produces frames_ocr.txt + ocr.done

source "$(dirname "$0")/common.sh"

DIR="$1"; FRAME_DIR="$DIR/frames"
OUT_TXT="$DIR/frames_ocr.txt"
[ -d "$FRAME_DIR" ] || { error "frames/ missing in $DIR"; exit 1; }

info "OCR for frames in $FRAME_DIR"

> "$OUT_TXT"

for f in "$FRAME_DIR"/*.webp; do
  [ -e "$f" ] || continue
  # Portable base64 (GNU vs BSD): GNU supports -w 0 to disable wrapping; BSD (macOS) does not.
  if base64 --help 2>&1 | grep -q -- "-w"; then
    BASE64_DATA=$(base64 -w 0 "$f")
  else
    BASE64_DATA=$(base64 < "$f" | tr -d '\n')
  fi

  info "OCR start for build JSON Body - $f"

  JSON_REQ=$(jq -n \
    --arg img "$BASE64_DATA" \
    --arg prompt "詳細完整分析我上傳的圖片，盡全力非常仔細描述圖片上所有的文字與圖形與表格。" \
    '{
      contents: [
        {
          role: "user",
          parts: [
            { inlineData: { mimeType: "image/webp", data: $img } },
            { text: $prompt }
          ]
        }
      ],
      generationConfig: { responseMimeType: "text/plain", maxOutputTokens: 65536 }
    }')

  info "OCR start for send request - $f"

  ENDPOINT="generateContent"
  [ "${GEMINI_STREAM:-0}" = "1" ] && ENDPOINT="streamGenerateContent"
  RESP=$(curl -s -X POST -H "Content-Type: application/json" \
       "https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL_ID}:${ENDPOINT}?key=${GEMINI_API_KEY}" \
       -d "$JSON_REQ")

  info "OCR start for parse response - $f"

  echo "# $f" >> "$OUT_TXT"
  echo "$RESP" | jq -r '.. | objects | select(has("candidates")).candidates[0].content.parts[].text' >> "$OUT_TXT"
  echo >> "$OUT_TXT"

  info "OCR end - $f"
done

touch "$DIR/ocr.done"
info "All OCR for $DIR completed"
